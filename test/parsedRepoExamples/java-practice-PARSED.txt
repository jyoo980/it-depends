{"Account.java":"package model;\n\npublic class Account {\n\n    protected String owner;\n    protected Bank bank;\n    protected double chequingBalance;\n    protected double savingsBalance;\n    protected double debitLimit;\n\n    public Account(Bank bank, String owner, double debitLimit) {\n        this.bank = bank;\n        chequingBalance = 0.0;\n        this.owner = owner;\n        savingsBalance = 0.0;\n        this.debitLimit = debitLimit;\n    }\n\n    public String getOwner() {\n        return owner;\n    }\n\n    public double getChequingBalance() {\n        return chequingBalance;\n    }\n\n    public double getSavingsBalance() {\n        return savingsBalance;\n    }\n\n    public double getDebitLimit() { return debitLimit; }\n\n    public boolean depositIntoChequing(int amount) {\n        if (amount > 0) {\n            chequingBalance += amount;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public boolean depositIntoSavings(int amount) {\n        if (amount > 0) {\n            savingsBalance += amount;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public boolean debitPurchase(int amount) {\n        if (chequingBalance - amount >= 0) {\n            chequingBalance -= amount;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public Bank getBank() {\n        return bank;\n    }\n\n    public void registerBank(Bank bank) {\n        if (this.bank == null) {\n            this.bank = bank;\n        }\n    }\n}\n","Bank.java":"package model;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Bank {\n\n    private String name;\n    private String location;\n    private double totalHoldings;\n    private List<Account> accounts;\n\n    public Bank(String name, String location) {\n        this.name = name;\n        this.location = location;\n        totalHoldings = 0.0;\n        accounts = new ArrayList<>();\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getLocation() {\n        return location;\n    }\n\n    public List<Account> getAccounts() { return accounts; }\n\n    public void registerAccount(Account acct) {\n        if (acct.getBank() == null) {\n            accounts.add(acct);\n            acct.registerBank(this);\n        }\n    }\n\n    public double computeTotalHoldings() {\n        double totalHoldings = 0;\n\n        totalHoldings += getTotalHoldings();\n\n        this.totalHoldings = totalHoldings;\n        return totalHoldings;\n    }\n\n\n    private double getTotalHoldings() {\n        double totalHoldings = 0.0;\n\n        for (Account acct : accounts) {\n            totalHoldings += acct.getChequingBalance();\n            totalHoldings += acct.getSavingsBalance();\n        }\n        return totalHoldings;\n    }\n}","RegularAccount.java":"package model;\n\npublic class RegularAccount extends Account {\n\n    private static final double INITAL_DEBIT_LIMIT = 1500.00;\n\n    public RegularAccount(String owner, Bank bank) {\n       super(bank, owner, INITAL_DEBIT_LIMIT);\n    }\n}","StudentAccount.java":"package model;\n\npublic class StudentAccount extends Account {\n\n    public static final double STUDENT_DEBIT_LIMIT = 200.00;\n\n    private String university;\n\n    public StudentAccount(String owner, Bank bank, String university) {\n        super(bank, owner, STUDENT_DEBIT_LIMIT);\n        bank.registerAccount(this);\n        this.university = university;\n        debitLimit = STUDENT_DEBIT_LIMIT;\n    }\n\n    public String getUniversity() {\n        return university;\n    }\n}","AccountTest.java":"package test;\n\nimport model.Account;\nimport model.Bank;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static junit.framework.TestCase.assertEquals;\nimport static junit.framework.TestCase.assertFalse;\nimport static junit.framework.TestCase.assertTrue;\nimport static model.StudentAccount.STUDENT_DEBIT_LIMIT;\n\npublic class AccountTest {\n\n    private static double DELTA = 0.01;\n\n    private Account acct;\n    private Bank bank;\n\n    @Before\n    public void setUp() {\n        bank = new Bank(\"Scotiabank\", \"Vancouver\");\n        acct = new Account(bank, \"Brian Smith\", STUDENT_DEBIT_LIMIT);\n    }\n\n    @Test\n    public void testGetters() {\n        assertEquals(acct.getOwner(), \"Brian Smith\");\n        assertEquals(acct.getSavingsBalance(), 0.0, DELTA);\n        assertEquals(acct.getChequingBalance(), 0.0, DELTA);\n        assertEquals(acct.getDebitLimit(), STUDENT_DEBIT_LIMIT);\n        assertEquals(acct.getBank(), bank);\n    }\n\n    @Test\n    public void testdepositChequing() {\n        assertEquals(acct.getChequingBalance(), 0.0, DELTA);\n        acct.depositIntoChequing(100);\n        assertFalse(acct.depositIntoChequing(-1));\n        assertEquals(acct.getChequingBalance(), 100, DELTA);\n    }\n\n    @Test\n    public void testdepositSavings() {\n        assertEquals(acct.getSavingsBalance(), 0.0, DELTA);\n        assertFalse(acct.depositIntoSavings(-1));\n        assertTrue(acct.depositIntoSavings(100));\n        assertEquals(acct.getSavingsBalance(), 100, DELTA);\n    }\n\n    @Test\n    public void testdebitPurchase() {\n        assertFalse(acct.debitPurchase(100));\n        acct.depositIntoChequing(100);\n        assertTrue(acct.debitPurchase(10));\n        assertEquals(acct.getChequingBalance(), 100 - 10, DELTA);\n    }\n\n\n}\n","IllegalValueException.java":"package exceptions;\n\npublic class IllegalValueException extends Exception {\n\n    public IllegalValueException() {\n\n    }\n\n    public IllegalValueException(String message) {\n        super(message);\n    }\n}\n","IncorrectAgeException.java":"package exceptions;\n\npublic class IncorrectAgeException extends Exception {\n\n    public IncorrectAgeException() {\n\n    }\n\n    public IncorrectAgeException(String msg) {\n        super(msg);\n    }\n}\n","NoFareException.java":"package exceptions;\n\npublic class NoFareException extends Exception {\n\n    public NoFareException() {\n\n    }\n\n    public NoFareException(String msg) {\n        super(msg);\n    }\n}\n","BusFareCard.java":"package model;\n\nimport exceptions.IllegalValueException;\nimport exceptions.IncorrectAgeException;\nimport exceptions.NoFareException;\n\npublic class BusFareCard {\n\n    private static final int AGE_CUTOFF = 18;\n    public static final double ADULT_FARE = 2.75;\n    public static final double CONCESSION_FARE = 1.75;\n    private String ownerName;\n    private int ownerAge;\n    private double balance;\n    private boolean fareLoaded;\n\n    public BusFareCard(String nm, int age, double initialLoad) throws IllegalValueException {\n        if (nm.equals(\"\") || age <= 0 || initialLoad <= 0) {\n            throw new IllegalValueException(\"Invalid name, age, or initial balance\");\n        } else {\n            ownerName = nm;\n            ownerAge = age;\n            balance = initialLoad;\n            fareLoaded = true;\n        }\n    }\n\n    // getters\n    public String getName() { return ownerName; }\n    public int getAge() { return ownerAge; }\n    public double getBalance() { return balance; }\n    public boolean isFareLoaded() { return fareLoaded; }\n\n    public void purchaseAdultFare() throws IllegalValueException, IncorrectAgeException {\n        if (ownerAge < AGE_CUTOFF) {\n            throw new IncorrectAgeException(\"You are under 18, purchase a concession ticket!\");\n        } else if (balance - ADULT_FARE < 0) {\n            throw new IllegalValueException(\"Not enough money to purchase a fare!\");\n        } else {\n            balance -= ADULT_FARE;\n            fareLoaded = true;\n        }\n    }\n\n    public void purchaseConcessionTicket() {\n        if (ownerAge <= AGE_CUTOFF && balance - CONCESSION_FARE >= 0) {\n            balance -= CONCESSION_FARE;\n            fareLoaded = true;\n        }\n    }\n\n    public void reloadBalance(double amount) throws IllegalValueException {\n        if (amount > 0) {\n            balance += amount;\n        } else {\n            throw new IllegalValueException(\"Invalid reload amount\");\n        }\n    }\n\n    public void boardBus() throws NoFareException {\n        if (fareLoaded) {\n            fareLoaded = false;\n        } else {\n            throw new NoFareException(\"No fare! Cannot board bus!\\n\");\n        }\n    }\n}\n","BusFareCardTest.java":"package test;\n\nimport exceptions.IllegalValueException;\nimport exceptions.IncorrectAgeException;\nimport exceptions.NoFareException;\nimport model.BusFareCard;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static junit.framework.TestCase.fail;\n\npublic class BusFareCardTest {\n\n    private BusFareCard card;\n\n    @Before\n    public void setUp() {\n        try {\n            card = new BusFareCard(\"Paul\", 18, 500);\n        } catch (Exception e) {\n            System.out.println(\"Inproper values inputted\");\n        }\n    }\n\n    @Test (expected = IllegalValueException.class)\n    public void testConstructorThrowsException() throws IllegalValueException {\n            card = new BusFareCard(\"Paul\", -1, 500);\n    }\n\n    @Test\n    public void testConstructorThrowsException2() {\n        try {\n            card = new BusFareCard(\"Paul\", -1, 500);\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n    }\n\n    @Test\n    public void testConstructorDoesNotThrowException() {\n        try {\n            card = new BusFareCard(\"Paul\", 10, 500);\n        } catch (Exception e) {\n            fail();\n        }\n\n    }\n\n    @Test\n    public void testReloadDoesNotThrowException() {\n        try {\n            card.reloadBalance(200);\n        } catch (Exception e) {\n            fail();\n        }\n    }\n\n    @Test (expected = IllegalValueException.class)\n    public void testReloadDoesThrowException() throws IllegalValueException {\n        card.reloadBalance(-1);\n    }\n\n    @Test (expected = NoFareException.class)\n    public void testBoardBusThrowsException() throws NoFareException {\n        card.boardBus();\n        card.boardBus();\n    }\n\n    @Test\n    public void testBoardBusDoesNotThrowException() {\n        try {\n            card.boardBus();\n        } catch (Exception e) {\n            fail();\n        }\n    }\n\n    @Test (expected = IncorrectAgeException.class)\n    public void testPurchaseAdultFareIncorrectAge() throws IncorrectAgeException,IllegalValueException{\n        BusFareCard card2= new BusFareCard(\"Jake\",10,200);\n        card2.purchaseAdultFare();\n    }\n}","Main.java":"package main;\n\nimport model.Car;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Car marcusCar = new Car(\"Toyota\", 2018);\n//        System.out.println(marcusCar);\n//        System.out.println(marcusCar.getManufacturer());\n//        System.out.println(marcusCar.getCurrentSpeed());\n//        System.out.println(marcusCar.getYear());\n    }\n}\n","Car.java":"package model;\n\npublic class Car {\n\n    protected int year;\n    protected String make;\n    protected int currentSpeed;\n    protected int currentGasCapacity;\n\n    public Car(int year, String make) {\n        this.year = year;\n        this.make = make;\n        currentSpeed = 0;\n        currentGasCapacity = 0;\n    }\n\n    public int getYear() {\n        return year;\n    }\n\n    public String getMake() {\n        return make;\n    }\n\n    public int getCurrentSpeed() {\n        return currentSpeed;\n    }\n\n    public int getCurrentGasCapacity() {\n        return currentGasCapacity;\n    }\n\n    public void brake() {\n        currentSpeed = 0;\n    }\n\n    public void accelerate(int delta) {\n        currentSpeed += delta;\n        currentGasCapacity--;\n    }\n\n    public boolean fillGas(int amount) {\n        currentGasCapacity += amount;\n        return true;\n    }\n\n\n\n\n\n\n\n\n\n\n}\n","CarTest.java":"package test;\n\nimport model.Car;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static junit.framework.TestCase.assertEquals;\n\npublic class CarTest {\n\n    private final double DELTA = 0.001;\n    private Car car;\n\n    @Before\n    public void setUp() {\n        car = new Car(\"Honda\", 2016);\n    }\n\n    @Test\n    public void testConstructor() {\n        assertEquals(car.getManufacturer(), \"Honda\");\n        assertEquals(car.getYear(), 2016);\n        assertEquals(car.getCurrentSpeed(), 0.0);\n    }\n\n    @Test\n    public void testsetSpeedSuccess() {\n        assertEquals(car.getCurrentSpeed(), 0, DELTA);\n        car.setSpeed(88);\n        assertEquals(car.getCurrentSpeed(), 88, DELTA);\n    }\n\n    @Test\n    public void testsetSpeedFail() {\n        assertEquals(car.getCurrentSpeed(),0,DELTA);\n        car.setSpeed(Car.MAX_SPEED+1);\n        assertEquals(car.getCurrentSpeed(),0,DELTA);\n    }\n\n    @Test\n    public void testaccelerateSuccess() {\n        assertEquals(car.getCurrentSpeed(), 0, DELTA);\n        car.setSpeed(50);\n        car.accelerate(30);\n        assertEquals(car.getCurrentSpeed(), 80, DELTA);\n    }\n\n    @Test\n    public void testaccelerateFail() {\n        assertEquals(car.getCurrentSpeed(), 0, DELTA);\n        car.setSpeed(50);\n        car.accelerate(1000);\n        assertEquals(car.getCurrentSpeed(), 50, DELTA);\n    }\n\n    @Test\n    public void testbrake() {\n        assertEquals(car.getCurrentSpeed(), 0, DELTA);\n        car.setSpeed(50);\n        car.brake();\n        assertEquals(car.getCurrentSpeed(), 0 , DELTA);\n    }\n}\n","CompassCard.java":"package model;\n\npublic class CompassCard {\n\n    private static final int POINTS_PER_CENT = 2;\n    private static final int POINTS_PER_TRIP = 100;\n    private static final double BUS_FARE_CHILD = 175;\n    private static final double BUS_FARE_ADULT = 275;\n    private static final double BUS_FARE_SENIOR = 200;\n\n    private int storedTrip;\n    private double storedValue;\n    private int storedPoints;\n\n    public CompassCard() {\n\n    }\n\n    public int getStoredTrip() {\n        return -1;\n    }\n\n    public double getStoredValue() {\n        return -1.0;\n    }\n\n    public int getStoredPoints() {\n        return -1;\n    }\n\n    public void loadValue(double value) {\n\n    }\n\n    public boolean rideBus(Rider r) {\n        return false;\n    }\n\n    private boolean payCorrectFare(Rider r) {\n        return false;\n    }\n\n    private boolean deductFare(double fare) {\n        return false;\n    }\n\n}\n","Rider.java":"package model;\n\npublic enum Rider {\n    CHILD,\n    ADULT,\n    SENIOR\n}\n","CompassCardTest.java":"package test;\n\nimport model.CompassCard;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static junit.framework.TestCase.assertEquals;\n\npublic class CompassCardTest {\n\n    private final double DELTA = 0.001;\n    private CompassCard card;\n\n    @Before\n    public void setUp() {\n\n    }\n\n    @Test\n    public void testTemplate() {\n        // TODO: test logic here\n    }\n\n}\n","CompassCardSoln.java":"package model;\n\npublic class CompassCardSoln {\n\n    private static final int POINTS_EARNED_PER_CENT = 2;\n    private static final int POINTS_COST_PER_TRIP = 100;\n    public static final double BUS_FARE_CHILD = 175;\n    public static final double BUS_FARE_ADULT = 275;\n    public static final double BUS_FARE_SENIOR = 200;\n\n    private int storedTrip;\n    private double storedValue;\n    private int storedPoints;\n\n    public CompassCardSoln() {\n        storedTrip = 0;\n        storedValue = 0;\n        storedPoints = 0;\n    }\n\n    public int getStoredTrip() {\n        return storedTrip;\n    }\n\n    public double getStoredValue() {\n        return storedValue;\n    }\n\n    public int getStoredPoints() {\n        return storedPoints;\n    }\n\n    public void loadValue(double value) {\n        storedValue += value;\n    }\n\n    public boolean rideBus(Rider r) {\n        if (storedTrip > 0) {\n            storedTrip -= 1;\n            return true;\n        } else {\n            return payCorrectFare(r);\n        }\n    }\n\n    private boolean payCorrectFare(Rider r) {\n        switch (r) {\n            case CHILD:\n                return deductFare(BUS_FARE_CHILD);\n            case ADULT:\n                return deductFare(BUS_FARE_ADULT);\n            default:\n                return deductFare(BUS_FARE_SENIOR);\n        }\n    }\n\n    private boolean deductFare(double fare) {\n        if (storedValue - fare >= 0) {\n            storedValue -= fare;\n            loadPoints(fare);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private void loadPoints(double cents) {\n        storedPoints += cents * POINTS_EARNED_PER_CENT;\n        int earnedTrips = storedPoints / POINTS_COST_PER_TRIP;\n        while (earnedTrips > 0) {\n            storedTrip += 1;\n            storedPoints -= POINTS_COST_PER_TRIP;\n            earnedTrips--;\n        }\n    }\n\n}\n","CompassCardSolnTest.java":"package test;\n\nimport model.CompassCardSoln;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static junit.framework.TestCase.assertEquals;\nimport static junit.framework.TestCase.assertFalse;\nimport static junit.framework.TestCase.assertTrue;\nimport static model.CompassCardSoln.BUS_FARE_CHILD;\nimport static model.Rider.ADULT;\nimport static model.Rider.CHILD;\nimport static model.Rider.SENIOR;\n\npublic class CompassCardSolnTest {\n\n    private final double DELTA = 0.001;\n    private CompassCardSoln card;\n\n    @Before\n    public void setUp() {\n        card = new CompassCardSoln();\n    }\n\n    @Test\n    public void testConstructor() {\n        assertEquals(card.getStoredTrip(), 0);\n        assertEquals(card.getStoredValue(), 0, DELTA);\n        assertEquals(card.getStoredPoints(), 0);\n    }\n\n    @Test\n    public void testloadValue() {\n        assertEquals(card.getStoredValue(), 0, DELTA);\n        card.loadValue(0);\n        assertEquals(card.getStoredValue(), 0, DELTA);\n        card.loadValue(100);\n        assertEquals(card.getStoredValue(), 100, DELTA);\n    }\n\n    @Test\n    public void testInsufficentValue() {\n        assertFalse(card.rideBus(CHILD));\n        assertFalse(card.rideBus(ADULT));\n        assertFalse(card.rideBus(SENIOR));\n    }\n\n    @Test\n    public void testSufficientValue() {\n        card.loadValue(500);\n        assertTrue(card.rideBus(CHILD));\n        assertEquals(card.getStoredValue(), 500 - BUS_FARE_CHILD, DELTA);\n        assertEquals(card.getStoredTrip(), 3);\n        assertEquals(card.getStoredPoints(), 50);\n    }\n\n    @Test\n    public void testStoredTripsUsed() {\n        card.loadValue(500);\n        assertTrue(card.rideBus(CHILD));\n        assertEquals(card.getStoredValue(), 500 - BUS_FARE_CHILD, DELTA);\n        assertEquals(card.getStoredTrip(), 3);\n        assertEquals(card.getStoredPoints(), 50);\n        assertTrue(card.rideBus(CHILD));\n        assertEquals(card.getStoredValue(), 500 - BUS_FARE_CHILD, DELTA);\n        assertEquals(card.getStoredTrip(), 2);\n        assertEquals(card.getStoredPoints(), 50);\n    }\n\n\n\n}\n","CellPhone.java":"package model;\n\npublic class CellPhone {\n\n    public static final int CREDIT_PER_CALL = 5;\n    public static final int CREDIT_PER_TEXT = 1;\n    public static final int CREDIT_PER_WEB = 10;\n\n    // TODO\n\n}","Communicator.java":"package model;\n\npublic interface Communicator {\n\n    void makeCall(Contact c);\n\n    void answerCall(Contact c);\n}","Contact.java":"package model;\n\npublic class Contact {\n\n    private String name;\n    private String number;\n    private int callCount;\n    private int textCount;\n    private int id;\n\n    public Contact(String name, String number) {\n        this.name = name;\n        this.number = number;\n        callCount = 0;\n        textCount = 0;\n        id = Integer.parseInt(number) * 31;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getNumber() {\n        return number;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void receiveCall() {\n        callCount++;\n    }\n\n    public void receiveText() {\n        textCount++;\n    }\n\n}","LandLine.java":"package model;\n\npublic class LandLine implements Communicator {\n\n    private String owner;\n\n    public LandLine(String name) {\n        this.owner = name;\n    }\n\n    @Override\n    public void makeCall(Contact c) {\n        System.out.println(\"Calling: \" + c.getName() + \" from a landline.\\n\");\n        c.receiveCall();\n    }\n\n    @Override\n    public void answerCall(Contact c) {\n        System.out.println(\"Receiving a call from: \" + c.getNumber() + \"\\n\");\n    }\n}\n","Mobile.java":"package model;\n\npublic interface Mobile {\n\n    void sendText();\n}","PayPhone.java":"package model;\n\npublic class PayPhone implements Communicator {\n\n    public static final int CREDIT_PER_CALL = 5;\n\n    private String location;\n    private int credits;\n\n    public PayPhone(String location) {\n        this.location = location;\n        credits = 0;\n    }\n\n    public String getLocation() {\n        return location;\n    }\n\n    public int getCredits() {\n        return credits;\n    }\n\n    @Override\n    public void makeCall(Contact c) {\n        if (hasSufficientCredits()) {\n            System.out.println(\"Making a payphone call to:\" + c.getName() + \"\\n\");\n            c.receiveCall();\n            deductCallCredit();\n        } else {\n            System.out.println(\"Insufficient credits, please insert more.\\n\");\n        }\n    }\n\n    @Override\n    public void answerCall(Contact c) {\n        System.out.println(\"ERROR: a payphone cannot answer calls!\\n\");\n    }\n\n    public void insertCredits(int credits) {\n        this.credits += credits;\n    }\n\n    private boolean hasSufficientCredits() {\n        return credits - CREDIT_PER_CALL >= 0;\n    }\n\n    private void deductCallCredit() {\n        credits -= CREDIT_PER_CALL;\n    }\n}","Wireless.java":"package model;\n\npublic interface Wireless {\n\n    void browseInternet();\n}","Convertible.java":"package model;\n\npublic class Convertible extends Car {\n\n    public static final double CONVERTIBLE_TOP_SPEED = 150.00;\n    public static final int CONVERTIBLE_GAS_CAPACITY = 80;\n\n    private boolean isTopDown;\n\n    public Convertible(int year, String make) {\n        super(year, make);\n        isTopDown = false;\n\n    }\n\n    public boolean isTopDown() {\n        return isTopDown;\n    }\n\n    public void putTopDown() { isTopDown = true; }\n\n    // MODIFIES: this\n    // REQUIRES: this car's top needs to be down if the current speed is greater than 50\n    //           otherwise, you can freely accelerate\n    // EFFECTS: this car's currentSpeed\n    public void accelerate(int delta) {\n        if (canAccelerate()) {\n            super.accelerate(delta);\n        }\n    }\n\n    private boolean canAccelerate() {\n        return currentGasCapacity > 0 && currentSpeed <= 50 && !isTopDown;\n    }\n\n    public boolean fillGas(int amount) {\n        if (canFillUp(amount)) {\n           return super.fillGas(amount);\n        } else {\n            return false;\n        }\n    }\n\n    private boolean canFillUp(int amount) {\n        return currentGasCapacity + amount < CONVERTIBLE_GAS_CAPACITY;\n    }\n\n}","TowTruck.java":"package model;\n\npublic class TowTruck extends Car{\n\n    public static final int TRUCK_MAX_TONNAGE = 2000;\n    public static final int TRUCK_MAX_GAS_CAPACITY = 200;\n\n    private double currentWeight;\n\n    public TowTruck(int year, String make) {\n       super(year,make);\n        currentWeight = 0;\n    }\n\n    // MODIFIES: this\n    // REQUIRES: the current weight should be less than or equal to this truck's\n    //           max tonnage subtracted by 1000\n    // EFFECTS: this\n    public void accelerate(int delta) {\n        if (canAccelerate()) {\n           super.accelerate(delta);\n        }\n    }\n\n    private boolean canAccelerate() {\n        return currentWeight <= TRUCK_MAX_TONNAGE - 1000 && currentGasCapacity > 0;\n    }\n\n    public boolean fillGas(int amount) {\n        if (canFillUp(amount)) {\n           return super.fillGas(amount);\n        } else {\n            return false;\n        }\n    }\n\n    private boolean canFillUp(int amount) {\n        return currentGasCapacity + amount < TRUCK_MAX_GAS_CAPACITY;\n    }\n\n    public boolean loadTruck(int load) {\n        if (canLoad(load)) {\n            currentWeight += load;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private boolean canLoad(int load) {\n        return currentWeight + load <= TRUCK_MAX_TONNAGE;\n    }\n\n}","ConvertibleTest.java":"package test;\n\nimport model.Convertible;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static junit.framework.TestCase.assertEquals;\nimport static junit.framework.TestCase.assertFalse;\nimport static junit.framework.TestCase.assertTrue;\nimport static model.Convertible.CONVERTIBLE_GAS_CAPACITY;\n\npublic class ConvertibleTest {\n\n    private Convertible car;\n\n    @Before\n    public void setUp() {\n        car = new Convertible(2018, \"Honda\");\n    }\n\n    @Test\n    public void testConstructor() {\n        assertEquals(car.getYear(), 2018);\n        assertEquals(car.getMake(), \"Honda\");\n        assertEquals(car.getCurrentSpeed(), 0);\n        assertEquals(car.getCurrentGasCapacity(), 0);\n        assertFalse(car.isTopDown());\n    }\n\n    @Test\n    public void testaccelerateSuccessful() {\n        car.fillGas(CONVERTIBLE_GAS_CAPACITY - 1);\n        car.accelerate(30);\n        assertEquals(car.getCurrentSpeed(), 30);\n        assertEquals(car.getCurrentGasCapacity(), CONVERTIBLE_GAS_CAPACITY - 2);\n    }\n\n    @Test\n    public void testaccelerateNoGas() {\n        car.accelerate(30);\n        assertEquals(car.getCurrentGasCapacity(), 0);\n        assertEquals(car.getCurrentSpeed(), 0);\n    }\n\n    @Test\n    public void testFillGasSuccess() {\n        assertEquals(car.getCurrentGasCapacity(), 0);\n        assertTrue(car.fillGas(40));\n        assertEquals(car.getCurrentGasCapacity(), 40);\n    }\n\n    @Test\n    public void testFillGasTooFull() {\n        assertEquals(car.getCurrentGasCapacity(), 0);\n        assertFalse(car.fillGas(CONVERTIBLE_GAS_CAPACITY + 1));\n        assertEquals(car.getCurrentGasCapacity(), 0);\n    }\n\n    @Test\n    public void testBrake() {\n        car.fillGas(CONVERTIBLE_GAS_CAPACITY - 1);\n        car.accelerate(30);\n        assertEquals(car.getCurrentSpeed(), 30);\n        car.brake();\n        assertEquals(car.getCurrentSpeed(), 0);\n    }\n}","TowTruckTest.java":"package test;\n\nimport model.TowTruck;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static junit.framework.TestCase.assertEquals;\nimport static junit.framework.TestCase.assertFalse;\nimport static junit.framework.TestCase.assertTrue;\nimport static model.TowTruck.TRUCK_MAX_TONNAGE;\n\npublic class TowTruckTest {\n\n    private TowTruck towTruck;\n\n    @Before\n    public void setUp() {\n        towTruck = new TowTruck(2005, \"Ford\");\n    }\n\n    @Test\n    public void testConstructor() {\n        assertEquals(towTruck.getYear(), 2005);\n        assertEquals(towTruck.getMake(), \"Ford\");\n        assertEquals(towTruck.getCurrentSpeed(), 0);\n        assertEquals(towTruck.getCurrentGasCapacity(), 0);\n    }\n\n    @Test\n    public void testaccelerateSuccessful() {\n        towTruck.fillGas(100);\n        towTruck.accelerate(10);\n        assertEquals(towTruck.getCurrentSpeed(), 10);\n        assertEquals(towTruck.getCurrentGasCapacity(), 100 - 1);\n    }\n\n    @Test\n    public void testaccelerateNoGas() {\n        towTruck.accelerate(10);\n        assertEquals(towTruck.getCurrentSpeed(), 0);\n        assertEquals(towTruck.getCurrentGasCapacity(), 0);\n    }\n\n    @Test\n    public void canLoadSuccess() {\n        assertTrue(towTruck.loadTruck(TRUCK_MAX_TONNAGE));\n    }\n\n    @Test\n    public void canLoadFail() {\n        towTruck.loadTruck(TRUCK_MAX_TONNAGE);\n        assertFalse(towTruck.loadTruck(1));\n    }\n\n}","CourseFullException.java":"package exceptions;\n\npublic class CourseFullException extends Exception {\n\n    public CourseFullException() {\n\n    }\n\n    public CourseFullException(String msg) {\n        super(msg);\n    }\n}","GPATooLowException.java":"package exceptions;\n\npublic class GPATooLowException extends Exception {\n\n    public GPATooLowException() {\n\n    }\n\n    public GPATooLowException(String msg) {\n        super(msg);\n    }\n\n}\n","MissingPrereqException.java":"package exceptions;\n\npublic class MissingPrereqException extends Exception {\n\n    public MissingPrereqException() {\n\n    }\n\n    public MissingPrereqException(String msg) {\n        super(msg);\n    }\n}","NoCoursesTakenException.java":"package exceptions;\n\npublic class NoCoursesTakenException extends Exception {\n\n    public NoCoursesTakenException() {\n\n    }\n\n    public NoCoursesTakenException(String msg) {\n        super(msg);\n    }\n}","Course.java":"package model;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Course {\n\n    private int DEFAULT_MAX_ENROLLMENT = 50;\n    private String faculty;\n    private String name;\n    private List<Course> prereq;\n    private int enrollment;\n    private double percentage;\n\n    public Course(String faculty, String name,  int enrollment, double pcnt) {\n        this.faculty = faculty;\n        this.name = name;\n        this.prereq = new ArrayList<>();\n        this.enrollment = enrollment;\n        percentage = pcnt;\n    }\n\n    public String getFaculty() {\n        return this.faculty;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public List<Course> getPrereq() {\n        return this.prereq;\n    }\n\n    public double getGrade() {\n        return this.percentage;\n    }\n\n    public int getEnrollment() {\n        return this.enrollment;\n    }\n\n    public boolean isCourseFull() {\n        return this.enrollment == DEFAULT_MAX_ENROLLMENT;\n    }\n\n    public void addStudent() {\n        this.enrollment++;\n    }\n\n    public void addPrereq(Course c) {\n        this.prereq.add(c);\n    }\n\n}","PastCourse.java":"package model;\n\npublic class PastCourse {\n    private double grade;\n    private Course course;\n\n    public PastCourse(double grade, Course course){\n        this.course = course;\n        this.grade = grade;\n    }\n\n    public double getGrade(){\n        return this.grade;\n    }\n}\n","Registrar.java":"package model;\nimport exceptions.CourseFullException;\nimport exceptions.GPATooLowException;\nimport exceptions.MissingPrereqException;\nimport exceptions.NoCoursesTakenException;\n\nimport java.util.List;\n\npublic class Registrar {\n\n    private String name;\n    private List<Transcript> students;\n\n    public Registrar(String name) {\n        // TODO: complete the implementation of this method\n    }\n\n    public String getName() {\n        // TODO: complete the implementation of this method\n        return null;\n    }\n    public List<Transcript> getStudents() {\n        // TODO: complete the implementation of this method\n        return null;\n    }\n\n    // MODIFIES: this\n    // EFFECTS: returns true if the student (represented as a transcript) was successfully added to the\n    //          Registrar's list. Remember to check if the student already exists in the list\n    public boolean addStudent(Transcript stu) {\n        // TODO: complete the implementation of this method\n        return false;\n    }\n\n    // EFFECTS: registers a given student represented by tct to a course c.\n    //          if the student is missing the necessary prerequisites throws MissingPrereqException\n    //          if the course is full throws CourseFullException\n    public boolean registerStudent(Course c, Transcript tct) {\n        // TODO: complete the implementation of this method\n        return false;\n    }\n\n    // EFFECTS: promotes all students to their next year level.\n    //          if the GPA is too low (2.6 out of 4.0), throws a GPATooLowException\n    //          if no courses have been taken, throws a NoCoursesTaken exception\n    public void promoteAllStudents() throws GPATooLowException, NoCoursesTakenException {\n        // TODO: complete the implementation of this method\n    }\n}","Transcript.java":"package model;\n\nimport exceptions.CourseFullException;\nimport exceptions.GPATooLowException;\nimport exceptions.MissingPrereqException;\nimport exceptions.NoCoursesTakenException;\n\nimport java.util.List;\n\npublic class Transcript {\n\n    private String name;\n    private int year;\n    private int id;\n    private double gpa;\n    private List<Course> currentCourses;\n    private List<Course> pastCourses;\n\n    public Transcript(String studentName, int academicYear, int studentID) {\n        // TODO: complete the implementation of this method\n    }\n\n    public String getName() {\n        // TODO: complete the implementation of this method\n        return null;\n    }\n\n    public int getAcademicYear() {\n        // TODO: complete the implementation of this method\n        return 0;\n    }\n\n    public int getId() {\n        // TODO: complete the implementation of this method\n        return 0;\n    }\n\n    public List<Course> getCurrentCourses() {\n        // TODO: complete the implementation of this method\n        return null;\n    }\n\n    public List<Course> getPastCourses() {\n        // TODO: complete the implementation of this method\n        // HINT: you may need to consider what kind of information a completed\n        // course on a transcript needs to have that the Course class\n        // doesn't already contains\n        return null;\n    }\n\n    // EFFECTS: computes cGPA\n    //          if the list of past courses is empty, throws NoCoursesTakenException\n    public double computeGPA() throws NoCoursesTakenException {\n        //          HINTS:\n        //          use the following formula to convert into a GPA\n        //          GPA (4.0 scale) = (total percentage/20) - 1\n        //          **Do you need a helper method?**\n\n        // TODO: complete the implementation of this method\n        return 0.0;\n    }\n\n    // EFFECTS: promotes the student represented by the transcript\n    //          to the next academic year if GPA is over 2.6 on a 4.0 scale, and return true\n    //          else return false with no change to the year field\n    //          if GPA is not over 2.6 on a 4.0 scale, throws GPATooLowException\n    //          if no courses have been taken, throws NoCoursesTakenException\n    public boolean promoteStudent() throws GPATooLowException, NoCoursesTakenException {\n\n        // TODO: complete the implementation of this method\n        return false;\n    }\n\n\n    // MODIFIES: this\n    // EFFECTS: adds the given course to the list of past courses and returns true,\n    //          unless pastCourses contains given course, then does not add and returns false\n    public boolean addToPastCourses(Course c) {\n        //TODO: implement this method\n        return false;\n    }\n\n    // MODIFIES: this\n    // EFFECTS: adds a course (c) into the record\n    //          if the transcript is missing prerequisites, throws a MissingPrereqException\n    //          if the course has no space for more students to register, throws a CourseFullException\n    public boolean addCourse(Course course) throws MissingPrereqException, CourseFullException {\n        // TODO: implement this method.\n        // You have to realize that there are a number of cases that your code needs to consider. What if the course\n        // you wish to add has no prerequisites? What if the course you want to add is already full?\n        // Careful consideration of these cases will lead to code that is correct\n        return false;\n    }\n}","CourseTest.java":"package test;\n\nimport model.Course;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\npublic class CourseTest {\n\n    private Course testCourse1;\n    private Course testCourse2;\n\n    @Before\n    public void setUp() {\n        testCourse1 = new Course(\"Science\", \"CPSC110\", 44, 80.4);\n        testCourse2 = new Course(\"Science\", \"CPSC210\", 32, 77.9);\n    }\n\n    @Test\n    public void testGetters() {\n        assertEquals(testCourse1.getFaculty(),\"Science\");\n        assertEquals(testCourse1.getName(),\"CPSC110\");\n        assertTrue(testCourse1.getPrereq().isEmpty());\n        assertEquals(testCourse1.getGrade(),80.4, 0.05);\n    }\n\n    @Test\n    public void testisCourseFull() {\n        assertFalse(testCourse1.isCourseFull());\n        for (int i = 0; i < 5; i++) { testCourse1.addStudent(); }\n        assertFalse(testCourse1.isCourseFull());\n        testCourse1.addStudent();\n        assertTrue(testCourse1.isCourseFull());\n    }\n\n    @Test\n    public void testaddPrereq() {\n        assertTrue(testCourse2.getPrereq().isEmpty());\n        testCourse2.addPrereq(testCourse1);\n        assertFalse(testCourse2.getPrereq().isEmpty());\n        assertTrue(testCourse2.getPrereq().contains(testCourse1));\n    }\n}","RegistrarTest.java":"package test;\n\nimport model.Course;\nimport model.Registrar;\nimport model.Transcript;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\npublic class RegistrarTest {\n\n    private Registrar testReg;\n    private Transcript testTct1;\n    private Transcript testTct2;\n    private Course CPSC110;\n    private Course CPSC121;\n\n    @Before\n    public void setUp() {\n        testReg = new Registrar(\"Samwise Gamgee\");\n        testTct1 = new Transcript(\"Paul Carter\", 1, 10639152);\n        testTct2 = new Transcript(\"John Appleseed\", 3, 10932043);\n        CPSC110 = new Course(\"Science\", \"Computation, Programs, and Programming\", 22, 89.9);\n        CPSC121 = new Course(\"Science\", \"Models of Computation\", 11, 86.3);\n    }\n\n    @Test\n    public void testGetters() {\n        assertEquals(testReg.getName(),\"Samwise Gamgee\");\n        assertTrue(testReg.getStudents().isEmpty());\n    }\n\n    @Test\n    public void testaddStudent() {\n        assertTrue(testReg.getStudents().isEmpty());\n        assertTrue(testReg.addStudent(testTct1));\n        assertTrue(testReg.getStudents().contains(testTct1));\n        assertFalse(testReg.addStudent(testTct1));\n        assertEquals(testReg.getStudents().size(),1);\n        assertTrue(testReg.addStudent(testTct2));\n        assertTrue(testReg.getStudents().contains(testTct2));\n    }\n\n    @Test\n    public void testpromoteAllStudents() {\n        testTct1.addToPastCourses(CPSC110);\n        testTct2.addToPastCourses(CPSC121);\n\n        assertEquals(testTct1.getAcademicYear(),1);\n        assertEquals(testTct2.getAcademicYear(),3);\n\n        testReg.addStudent(testTct1);\n        testReg.addStudent(testTct2);\n        testReg.promoteAllStudents();\n\n        assertEquals(testTct1.getAcademicYear(),2);\n        assertEquals(testTct2.getAcademicYear(),4);\n    }\n\n    @Test\n    public void testregisterStudent() {\n        assertFalse(CPSC110.isCourseFull());\n        assertEquals(CPSC110.getEnrollment(),22);\n        testReg.registerStudent(CPSC110, testTct1);\n        assertEquals(CPSC110.getEnrollment(),23);\n        assertTrue(testTct1.getCurrentCourses().contains(CPSC110));\n    }\n}","TranscriptTest.java":"package test;\n\nimport exceptions.CourseFullException;\nimport exceptions.GPATooLowException;\nimport exceptions.MissingPrereqException;\nimport exceptions.NoCoursesTakenException;\nimport model.Course;\nimport model.Transcript;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\npublic class TranscriptTest {\n\n    private Transcript testTct;\n    private Course CPSC110;\n    private Course CPSC121;\n    private Course CPSC210;\n    private Course CPSC221;\n    private Course CPSC213;\n    private Course CPSC320;\n\n    @Before\n    public void setUp() {\n        CPSC110 = new Course(\"Science\", \"Computation, Programs, and Programming\", 22, 89.9);\n        CPSC121 = new Course(\"Science\", \"Models of Computation\", 11, 86.3);\n        CPSC210 = new Course(\"Science\", \"Introduction to Software Construction\", 30, 88.4);\n        CPSC221 = new Course(\"Science\", \"Basic Data Structures and Algorithms\", 23, 88.3);\n        CPSC213 = new Course(\"Science\", \"Introduction to Computer Systems\", 13, 78.7);\n        CPSC320 = new Course(\"Science\", \"Intermediate Algorithm Design and Analysis\", 44, 90.4);\n        testTct = new Transcript(\"John Appleseed\", 2, 10639152);\n    }\n\n    @Test\n    public void testGetters() {\n        assertEquals(testTct.getName(),\"John Appleseed\");\n        assertEquals(testTct.getAcademicYear(),2);\n        assertEquals(testTct.getId(),10639152);\n        assertTrue(testTct.getCurrentCourses().isEmpty());\n        assertTrue(testTct.getPastCourses().isEmpty());\n    }\n\n    @Test\n    public void computeGPAWithException() {\n        assertTrue(testTct.getPastCourses().isEmpty());\n        try {\n            testTct.computeGPA();\n        } catch (NoCoursesTakenException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n\n    @Test\n    public void computeGPANoException() {\n        assertTrue(testTct.getPastCourses().isEmpty());\n        testTct.addToPastCourses(CPSC110);\n        try {\n            double testResult = testTct.computeGPA();\n            assertEquals(testResult,3.495, 0.05);\n        } catch (NoCoursesTakenException e) {\n            fail(\"Exception should not have been thrown.\");\n        }\n\n        testTct.addToPastCourses(CPSC121);\n\n        try {\n            double testResult = testTct.computeGPA();\n            assertEquals(testResult,3.405, 0.05);\n        } catch (NoCoursesTakenException e) {\n            fail(\"Exception should not have been thrown.\");\n        }\n    }\n\n    @Test\n    public void testpromoteStudentNoException() {\n        testTct.addToPastCourses(CPSC110);\n        testTct.addToPastCourses(CPSC210);\n        assertEquals(testTct.getAcademicYear(),2);\n\n        try {\n            assertTrue(testTct.promoteStudent());\n        } catch (GPATooLowException | NoCoursesTakenException e) {\n            fail(\"Exception should not have been thrown.\");\n        }\n        assertEquals(testTct.getAcademicYear(),3);\n    }\n\n    @Test\n    public void testpromoteStudentNoCoursesException() {\n\n        assertEquals(2, testTct.getAcademicYear());\n\n        try {\n            assertFalse(testTct.promoteStudent());\n        } catch (GPATooLowException e) {\n            fail(\"This is the incorrect exception.\");\n        } catch (NoCoursesTakenException ex) {\n            System.out.println(ex.getMessage());\n        }\n        assertEquals(2, testTct.getAcademicYear());\n    }\n\n    @Test\n    public void testpromoteStudentGPATooLowException() {\n        Course CPEN261 = new Course(\"Applied Science\", \"Computer Systems\", 33, 22.5);\n        testTct.addToPastCourses(CPEN261);\n        assertEquals(testTct.getAcademicYear(),2);\n        try {\n            testTct.promoteStudent();\n        } catch (GPATooLowException | NoCoursesTakenException e) {\n            System.out.println(e.getMessage());\n        }\n        assertEquals(testTct.getAcademicYear(),2);\n    }\n\n    @Test\n    public void testaddCourseNoException() {\n        assertTrue(testTct.getCurrentCourses().isEmpty());\n        try {\n            testTct.addCourse(CPSC110);\n            assertTrue(testTct.getCurrentCourses().contains(CPSC110));\n        } catch (MissingPrereqException | CourseFullException e) {\n            fail(\"Exception should not have been thrown.\");\n        }\n        assertFalse(testTct.getCurrentCourses().isEmpty());\n        assertTrue(testTct.getCurrentCourses().contains(CPSC110));\n    }\n\n    @Test\n    public void testaddCourseWithMissingPrereqException() {\n        CPSC320.addPrereq(CPSC221);\n        assertTrue(testTct.getPastCourses().isEmpty());\n        try {\n            testTct.addCourse(CPSC320);\n        } catch (MissingPrereqException e1) {\n            System.out.println(e1.getMessage());\n        } catch (CourseFullException e2) {\n            fail(\"This exception was incorrectly thrown.\");\n        }\n    }\n\n    @Test\n    public void testaddCourseWithCourseFullException() {\n        for (int i = 0; i < 28; i++) { CPSC110.addStudent(); }\n\n        try {\n            testTct.addCourse(CPSC110);\n        } catch (MissingPrereqException e1) {\n            fail(\"This exception was incorrectly thrown\");\n        } catch (CourseFullException e2) {\n            System.out.println(e2.getMessage());\n        }\n    }\n}","Cell.java":"package model;\n\npublic class Cell {\n\n    public static final int CELL_PIXELS = 30;\n\n    private int column;\n    private int row;\n\n    public Cell(int column, int row) {\n        this.column = column;\n        this.row = row;\n    }\n\n    public int getColumn() {\n        return column;\n    }\n\n    public int getRow() {\n        return row;\n    }\n\n    public int getHorizontalScreenCoord() {\n        return column * CELL_PIXELS;\n    }\n\n    public int getVerticalScreenCoord() {\n        return row * CELL_PIXELS;\n    }\n\n    // Don't worry too much about the Equals and Hashcode methods here, we'll cover these later\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) return true;\n        if (obj == null || !(obj instanceof Cell)) return false;\n\n        Cell objAsCell = (Cell) obj;\n        return (objAsCell.column == column && objAsCell.row == row);\n    }\n\n    @Override\n    public int hashCode() {\n        int result = column;\n        result = 31 * result + row;\n        return result;\n    }\n}","Direction.java":"package model;\n\npublic enum Direction {\n    // Represents the direction in which a Snake can move\n    UP, DOWN, LEFT, RIGHT\n}","Food.java":"package model;\n\npublic class Food {\n\n    public static final int INITIAL_NUTRITIONAL_VAL = 100;\n    public static final int DECAY_AMOUNT = 10;\n\n    private Cell position;\n    private int nutritionalVal;\n\n    public Food(Cell position) {\n        this.position = position;\n        nutritionalVal = INITIAL_NUTRITIONAL_VAL;\n    }\n\n    // Notice we have two constructors, example of method overloading\n    public Food (Cell position, int nutritionalVal) {\n        this.position = position;\n        this.nutritionalVal = nutritionalVal;\n    }\n\n    public Cell getPosition() {\n        return position;\n    }\n\n    public int getNutritionalVal() {\n        return nutritionalVal;\n    }\n\n    public void decay() {\n        if (nutritionalVal - DECAY_AMOUNT <= 0) {\n            nutritionalVal = 0;\n        } else {\n            nutritionalVal -= DECAY_AMOUNT;\n        }\n    }\n}","Snake.java":"package model;\n\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.List;\n\nimport static model.Direction.*;\n\npublic class Snake {\n\n    public static final int NUTRITION_TO_GROW = 50; // Amount required for Snake to grow one Cell\n\n    private Cell head;\n    private List<Cell> body;\n    private Direction direction;\n    private int nutritionConsumed;\n\n    public Snake(Cell head) {\n        this.head = head;\n        body = new LinkedList<>();\n        direction = RIGHT;\n        nutritionConsumed = 0;\n    }\n\n    public Cell getPosition() {\n        return head;\n    }\n\n    public List<Cell> getBodyPositions() {\n        return Collections.unmodifiableList(body);\n    }\n\n    public Direction getDirection() {\n        return direction;\n    }\n\n    public int length() {\n        return body.size() + 1; // body + head\n    }\n\n    public void eat(Food food) {\n        nutritionConsumed += food.getNutritionalVal();\n    }\n\n    public boolean canGrow() {\n        return nutritionConsumed >= NUTRITION_TO_GROW;\n    }\n\n    private void moveHead() {\n        switch(direction) {\n            case LEFT:\n                head = new Cell(head.getRow(), head.getColumn() - 1);\n                break;\n            case RIGHT:\n                head = new Cell(head.getRow(), head.getColumn() + 1);\n                break;\n            case UP:\n                head = new Cell(head.getRow() - 1, head.getColumn());\n                break;\n            case DOWN:\n                head = new Cell(head.getRow() + 1, head.getColumn());\n                break;\n        }\n    }\n\n    public void move() {\n        body.add(0, new Cell(head.getRow(), head.getColumn()));\n\n        if (canGrow()) {\n            nutritionConsumed -= NUTRITION_TO_GROW;\n        }\n        else {\n            body.remove(body.size() - 1);\n        }\n\n        moveHead();\n    }\n\n    // Rotates Snake to the left\n    public void rotateLeft() {\n        switch (direction) {\n            case UP:\n                direction = LEFT;\n                break;\n            case LEFT:\n                direction = DOWN;\n                break;\n            case DOWN:\n                direction = RIGHT;\n                break;\n            case RIGHT:\n                direction = UP;\n        }\n    }\n\n    // Rotates Snake to the right\n    public void rotateRight() {\n        switch (direction) {\n            case LEFT:\n                direction = Direction.UP;\n                break;\n            case RIGHT:\n                direction = Direction.DOWN;\n                break;\n            case UP:\n                direction = Direction.RIGHT;\n                break;\n            case DOWN:\n                direction = Direction.LEFT;\n                break;\n        }\n    }\n\n}","SnakeGame.java":"package model;\n\nimport java.util.*;\n\npublic class SnakeGame {\n\n    public static final int BOARD_COLS = 10;\n    public static final int BOARD_ROWS = BOARD_COLS;\n\n    private Random randomNumberGenerator;\n    private Snake snake;\n    private Food food;\n\n    public SnakeGame() {\n        randomNumberGenerator = new Random();\n        snake = new Snake(new Cell(BOARD_ROWS/2, BOARD_COLS/2));\n        food = createFood();\n    }\n\n    public void update() {\n        if (!isOver()) {\n            snake.move();\n            food.decay();\n            if (canSnakeEat()) {\n                eatFood();\n                food = createFood();\n            }\n        }\n    }\n\n    public Cell getSnakeHeadPosition() {\n        return snake.getPosition();\n    }\n\n    public List<Cell> getSnakeBodyPositions() {\n        return snake.getBodyPositions();\n    }\n\n    public Direction getSnakeDirection() {\n        return snake.getDirection();\n    }\n\n    public int getSnakeLength() {\n        return snake.length();\n    }\n\n    public Cell getFoodPosition() {\n        return food.getPosition();\n    }\n\n    public int getFoodNutritionalValue() {\n        return food.getNutritionalVal();\n    }\n\n    public boolean isOver() {\n        return !isInBounds(snake.getPosition());\n    }\n\n    private boolean isInBounds(Cell cell) {\n        return cell.getColumn() >= 0 && cell.getColumn() < BOARD_COLS\n                && cell.getRow() >= 0 && cell.getRow() < BOARD_ROWS;\n    }\n\n    private boolean canSnakeEat() {\n        return snake.getPosition().equals(food.getPosition());\n    }\n\n    private void eatFood() {\n        snake.eat(food);\n    }\n\n    private Food createFood() {\n        Cell position = randomCell();\n\n        while (position.equals(snake.getPosition()))\n            position = randomCell();\n\n        return new Food(position);\n    }\n\n    public void rotateSnakeLeft() {\n        snake.rotateLeft();\n    }\n\n    public void rotateSnakeRight() {\n        snake.rotateRight();\n    }\n\n    private Cell randomCell() {\n        return new Cell(randomNumberGenerator.nextInt(BOARD_ROWS), randomNumberGenerator.nextInt(BOARD_COLS));\n    }\n\n}\n","CellTest.java":"package test;\n\nimport model.Cell;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static junit.framework.TestCase.assertEquals;\nimport static junit.framework.TestCase.assertFalse;\nimport static junit.framework.TestCase.assertTrue;\nimport static model.Cell.CELL_PIXELS;\n\npublic class CellTest {\n\n    private Cell c1, c2;\n\n    @Before\n    public void setUp() {\n        c1 = new Cell(0, 0);\n        c2 = new Cell(3, 3);\n    }\n\n    @Test\n    public void testConstructor() {\n        assertEquals(c1.getColumn(), 0);\n        assertEquals(c1.getRow(), 0);\n        assertEquals(c2.getColumn(), 3);\n        assertEquals(c2.getRow(), 3);\n    }\n\n    @Test\n    public void testgetHorizontalScreenCoord() {\n        assertEquals(c1.getHorizontalScreenCoord(), 0);\n        assertEquals(c2.getHorizontalScreenCoord(), 3 * CELL_PIXELS);\n    }\n\n    @Test\n    public void testgetVerticalScreenCoord() {\n        assertEquals(c1.getVerticalScreenCoord(), 0);\n        assertEquals(c2.getVerticalScreenCoord(), 3 * CELL_PIXELS);\n    }\n\n    @Test\n    public void testEquals() {\n        assertFalse(c1.equals(c2));\n        assertFalse(c2.equals(c1));\n        Cell c1Copy = new Cell(0, 0);\n        assertTrue(c1.equals(c1Copy));\n    }\n}","FoodTest.java":"package test;\n\nimport model.Cell;\nimport model.Food;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static junit.framework.TestCase.assertEquals;\nimport static model.Food.DECAY_AMOUNT;\nimport static model.Food.INITIAL_NUTRITIONAL_VAL;\n\npublic class FoodTest {\n\n    private Food food;\n    private Cell cell;\n\n    @Before\n    public void setUp() {\n        cell = new Cell(2, 2);\n        food = new Food(cell);\n    }\n\n    @Test\n    public void testgetPosition() {\n        assertEquals(food.getPosition(), cell);\n    }\n\n    @Test\n    public void testgetNutritionalVal() {\n        assertEquals(food.getNutritionalVal(), INITIAL_NUTRITIONAL_VAL);\n    }\n\n    @Test\n    public void decaySuccess() {\n        assertEquals(food.getNutritionalVal(), INITIAL_NUTRITIONAL_VAL);\n        food.decay();\n        assertEquals(food.getNutritionalVal(), INITIAL_NUTRITIONAL_VAL - DECAY_AMOUNT);\n    }\n\n    @Test\n    public void testdecayFail() {\n        Food food = new Food(cell, 9);\n        food.decay();\n        assertEquals(food.getNutritionalVal(), 0);\n    }\n}","SnakeTest.java":"package test;\n\nimport model.Snake;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class SnakeTest {\n\n    private Snake snake;\n\n    @Before\n    public void setUp() {\n        // TODO: set up the Snake\n    }\n\n    @Test\n    public void testXXX() {\n        // TODO: template for unit tests\n    }\n}","SnakeApp.java":"package ui;\n\nimport model.SnakeGame;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\n\nimport static model.Cell.CELL_PIXELS;\nimport static model.SnakeGame.BOARD_COLS;\nimport static model.SnakeGame.BOARD_ROWS;\n\nclass SnakeApp extends JFrame {\n    private static final int WIDTH = BOARD_COLS * CELL_PIXELS;\n    private static final int HEIGHT = BOARD_ROWS * CELL_PIXELS;\n    private static final Color GAME_OVER_COLOUR = new Color(80, 40, 80);\n    private static final int INTERVAL = 500;\n    private SnakeGame game;\n    private SnakeGameRenderer renderer;\n\n    SnakeApp() {\n        super(\"Snake\");\n        setSize(WIDTH, HEIGHT);\n        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n        setUndecorated(true);\n        game = new SnakeGame();\n        renderer = new SnakeGameRenderer(game);\n        addKeyListener(new KeyHandler());\n        centreOnScreen();\n        addTimer();\n        setVisible(true);\n    }\n\n    @Override\n    public void paint(Graphics graphics) {\n        graphics.setColor(game.isOver() ? GAME_OVER_COLOUR : getBackground());\n        graphics.fillRect(0, 0, WIDTH, HEIGHT);\n\n        renderer.draw(graphics);\n    }\n\n    private void addTimer() {\n        final Timer t = new Timer(INTERVAL, null);\n        t.addActionListener(new ActionListener(){\n            @Override\n            public void actionPerformed(ActionEvent ae) {\n                if (game.isOver()) {\n                    t.stop();\n                }\n\n                game.update();\n                repaint();\n            }\n        });\n\n        t.start();\n    }\n\n    private void centreOnScreen() {\n        Dimension scrn = Toolkit.getDefaultToolkit().getScreenSize();\n        setLocation((scrn.width - getWidth()) / 2, (scrn.height - getHeight()) / 2);\n    }\n\n    private class KeyHandler extends KeyAdapter {\n        @Override\n        public void keyPressed(KeyEvent e) {\n            switch(e.getKeyCode()) {\n                case KeyEvent.VK_LEFT:\n                case KeyEvent.VK_KP_LEFT:\n                    game.rotateSnakeLeft();\n                    break;\n                case KeyEvent.VK_RIGHT:\n                case KeyEvent.VK_KP_RIGHT:\n                    game.rotateSnakeRight();\n                    break;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        new SnakeApp();\n    }\n}\n","SnakeGameRenderer.java":"package ui;\n\nimport model.Cell;\nimport model.Food;\nimport model.SnakeGame;\n\nimport java.awt.*;\nimport java.awt.geom.AffineTransform;\n\nclass SnakeGameRenderer {\n\n    private static final Color HEAD_COLOUR = new Color(150, 150, 10);\n    private static final Color BODY_COLOUR = new Color(210, 210, 10);\n    private SnakeGame game;\n\n    SnakeGameRenderer(SnakeGame game) {\n        this.game = game;\n    }\n\n    void draw(Graphics graphics) {\n        drawFood(graphics);\n        drawSnake(graphics);\n    }\n\n    private void drawFood(Graphics graphics) {\n        final double FILL_PERCENT = 0.75;\n        final int OFFSET = (int) (Cell.CELL_PIXELS * (1.0 - FILL_PERCENT)) / 2;\n        final int SIZE = (int) (Cell.CELL_PIXELS * FILL_PERCENT);\n        Cell foodPosition = game.getFoodPosition();\n\n        graphics.setColor(computeColour());\n        graphics.fillRect(foodPosition.getHorizontalScreenCoord() + OFFSET,\n                foodPosition.getVerticalScreenCoord() + OFFSET,\n                SIZE, SIZE);\n    }\n\n    private Color computeColour() {\n        final double PERCENT_DECAYED = 1.0 - (double) game.getFoodNutritionalValue() / Food.INITIAL_NUTRITIONAL_VAL;\n        final int MAX_COLOUR = 255;\n        final int RED = (int) (PERCENT_DECAYED * MAX_COLOUR);\n        final int GREEN = MAX_COLOUR - RED;\n        final int BLUE = 0;\n\n        return new Color(RED, GREEN, BLUE);\n    }\n\n    private void drawSnake(Graphics graphics) {\n        drawBody(graphics);\n        drawHead(graphics);\n    }\n\n    private void drawHead(Graphics graphics) {\n        switch(game.getSnakeDirection()) {\n            case LEFT:\n                drawAtAngle(graphics, Math.PI / 2);\n                break;\n            case RIGHT:\n                drawAtAngle(graphics, -Math.PI / 2);\n                break;\n            case UP:\n                drawAtAngle(graphics, Math.PI);\n                break;\n            case DOWN:\n                drawAtAngle(graphics, 0.0);\n                break;\n        }\n    }\n\n    private void drawAtAngle(Graphics graphics, double angle) {\n        Graphics2D graphics2D = (Graphics2D) graphics;\n        AffineTransform savedTransform = setUpTransform(graphics2D);\n\n        drawBackground(graphics);\n\n        graphics2D.rotate(angle);\n        drawEyes(graphics);\n        graphics2D.rotate(-angle);\n\n        undoTransform(graphics2D, savedTransform);\n    }\n\n    private void drawBackground(Graphics graphics) {\n        graphics.setColor(HEAD_COLOUR);\n        graphics.fillOval(-Cell.CELL_PIXELS / 2, -Cell.CELL_PIXELS / 2, Cell.CELL_PIXELS, Cell.CELL_PIXELS);\n    }\n\n    private void drawEyes(Graphics graphics) {\n        final int OFFSET = Cell.CELL_PIXELS / 8;\n        final int EYE_DIAMETER = Cell.CELL_PIXELS / 5;\n\n        graphics.setColor(Color.BLACK);\n        graphics.fillOval(-OFFSET - EYE_DIAMETER, OFFSET, EYE_DIAMETER, EYE_DIAMETER);\n        graphics.fillOval(OFFSET, OFFSET, EYE_DIAMETER, EYE_DIAMETER);\n    }\n\n    private void drawBody(Graphics graphics) {\n        graphics.setColor(BODY_COLOUR);\n        for(Cell next : game.getSnakeBodyPositions()) {\n            drawCell(graphics, next);\n        }\n    }\n\n    private void drawCell(Graphics graphics, Cell cell) {\n        graphics.fillOval(cell.getHorizontalScreenCoord(), cell.getVerticalScreenCoord(),\n                Cell.CELL_PIXELS, Cell.CELL_PIXELS);\n    }\n\n    private AffineTransform setUpTransform(Graphics2D graphics) {\n        Cell head = game.getSnakeHeadPosition();\n\n        AffineTransform savedTransform = graphics.getTransform();\n        graphics.translate(head.getHorizontalScreenCoord() + Cell.CELL_PIXELS / 2,\n                head.getVerticalScreenCoord() + Cell.CELL_PIXELS / 2);\n        return savedTransform;\n    }\n\n    private void undoTransform(Graphics2D graphics, AffineTransform savedTransform) {\n        graphics.setTransform(savedTransform);\n    }\n}\n"}